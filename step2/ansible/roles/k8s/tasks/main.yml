---
- name: Disable swap immediately
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  tags: k8s

- name: Ensure swap is disabled in fstab
  lineinfile:
    path: /etc/fstab
    regexp: '^.*swap.*$'
    state: absent
  tags: k8s

- name: Load necessary kernel modules
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
  tags: k8s

- name: Apply sysctl settings
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
  tags: k8s

- name: Reload sysctl settings
  command: sysctl --system
  tags: k8s

- name: Ensure keyring directory exists
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  tags: k8s

# - name: Download and add Kubernetes GPG key
#   shell: |
#     sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#   args:
#     creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#   tags: k8s
#
# - name: Add Kubernetes apt repository
#   ansible.builtin.shell: |
#     echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
#   tags: k8s
#
# - name: Update apt cache
#   apt:
#     update_cache: yes
#   tags: k8s
#
# - name: Install Kubernetes tools
#   apt:
#     name:
#       - kubelet
#       - kubeadm
#       - kubectl
#     state: present
#     update_cache: true
#   tags: k8s

- name: Create an Empty file for Kubeadm configuring
  copy:
    content: ""
    dest: /etc/kubernetes/kubeadm-config.yaml
    force: no
  tags: k8s

- name: Download container images if not already pulled
  shell: sudo kubeadm config images list --cri-socket=unix:///var/run/crio/crio.sock | sudo xargs -n1 crictl images |  sudo grep -v 'IMAGE' || sudo kubeadm config images pull --cri-socket=unix:///var/run/crio/crio.sock
  changed_when: false
  tags: k8s

- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: kube_init_status
  tags: k8s

# - name: Initialize the cluster
#   shell: sudo kubeadm init --cri-socket=unix:///var/run/crio/crio.sock --pod-network-cidr=10.10.0.0/16 --control-plane-endpoint=94.101.185.196:6443 --upload-certs --apiserver-advertise-address=10.255.255.105
#   when: inventory_hostname == groups['master'][0]
#   tags: k8s

- name: Ensure /etc/kubernetes directory exists
  file:
    path: /etc/kubernetes
    state: directory
    owner: root
    group: root
    mode: '0755'
  when:
    - not kube_init_status.stat.exists
  tags: k8s

- name: Remove proxy environment variables from /etc/environment
  become: yes
  lineinfile:
    path: /etc/environment
    regexp: '^(http_proxy|https_proxy|no_proxy|HTTP_PROXY|HTTPS_PROXY|NO_PROXY)='
    state: absent
  tags: k8s

- name: Initialize the cluster
  shell: kubeadm init --cri-socket=unix:///var/run/crio/crio.sock --pod-network-cidr={{ pod_network_cidr }} --control-plane-endpoint={{ control_plane_endpoint }}  --upload-certs --apiserver-advertise-address={{ advertise_private_ip }}
  when:
    - inventory_hostname == groups['master'][0]
    - not kube_init_status.stat.exists
  tags: k8s

- name: Create .kube directory for ubuntu
  become_user: ubuntu
  file:
    path: /home/ubuntu/.kube
    state: directory
    mode: '0755'
  when:
    - inventory_hostname == groups['master'][0]
    - not kube_init_status.stat.exists
  tags: k8s

- name: Copy admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /home/ubuntu/.kube/config
    remote_src: yes
    owner: ubuntu
    group: ubuntu
    mode: '0644'
  when:
    - inventory_hostname == groups['master'][0]
    - not kube_init_status.stat.exists
  tags: k8s

- name: Get kubeadm token
  shell: kubeadm token list | awk 'NR==2 {print $1}'
  register: token_result
  changed_when: false
  when: inventory_hostname == groups['master'][0]
  tags: k8s

- name: Get discovery-token-ca-cert-hash
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | \
         openssl rsa -pubin -outform der 2>/dev/null | \
         sha256sum | awk '{print $1}'
  register: ca_hash_result
  changed_when: false
  when: inventory_hostname == groups['master'][0]
  tags: k8s

- name: Get certificate key
  shell: kubeadm init phase upload-certs --upload-certs | tail -1
  register: cert_key_result
  changed_when: false
  when: inventory_hostname == groups['master'][0]
  tags: k8s

- name: Set join variables as facts
  set_fact:
    kubeadm_token: "{{ token_result.stdout }}"
    ca_cert_hash: "{{ ca_hash_result.stdout }}"
    cert_key: "{{ cert_key_result.stdout }}"
  when: inventory_hostname == groups['master'][0]
  tags: k8s

- name: Share join variables across hosts
  set_fact:
    kubeadm_token: "{{ hostvars[groups['master'][0]]['kubeadm_token'] }}"
    ca_cert_hash: "{{ hostvars[groups['master'][0]]['ca_cert_hash'] }}"
    cert_key: "{{ hostvars[groups['master'][0]]['cert_key'] }}"
  when: inventory_hostname != groups['master'][0]
  tags: k8s

- debug:
    msg: "Join token: {{ kubeadm_token }}, CA hash: {{ ca_cert_hash }}, Cert key: {{ cert_key }}"
  when: inventory_hostname != groups['master'][0]

- name: Check if node is already part of cluster
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf_stat
  tags: k8s

- name: Join as control plane
  shell: |
    sudo kubeadm join {{ control_plane_endpoint }} \
      --token {{ kubeadm_token }} \
      --discovery-token-ca-cert-hash sha256:{{ ca_cert_hash }} \
      --control-plane --certificate-key {{ cert_key }}
  when:
    - inventory_hostname != groups['master'][0]
    - not kubelet_conf_stat.stat.exists
  tags: k8s

- name: Allow workloads on control-plane nodes
  command: kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
  changed_when: false
  delegate_to: "{{ groups['master'][0] }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  tags: k8s
